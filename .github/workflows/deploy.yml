name: Deploy to GCP

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: cashflow-finder-prod
  VM_NAME: cashflow-finder-vm
  ZONE: us-central1-a

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run TypeScript check
      run: npm run typecheck
    
    - name: Run linting
      run: npm run lint || echo "Linting issues found but continuing..."
    
    - name: Build application
      run: npm run build

  deploy:
    runs-on: ubuntu-latest
    needs: test
    name: Deploy to Production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Configure gcloud
      run: |
        gcloud config set project ${{ env.PROJECT_ID }}
        gcloud config set compute/zone ${{ env.ZONE }}
    
    - name: Check VM status
      run: |
        VM_STATUS=$(gcloud compute instances describe ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --format="value(status)")
        echo "VM Status: $VM_STATUS"
        
        if [ "$VM_STATUS" != "RUNNING" ]; then
          echo "Starting VM..."
          gcloud compute instances start ${{ env.VM_NAME }} --zone=${{ env.ZONE }}
          sleep 30
        fi
    
    - name: Deploy to VM
      run: |
        # Create deployment script
        cat > deploy-commands.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Navigate to application directory
        cd /opt/cashflow-finder
        
        # Backup current version
        if [ -d ".backup" ]; then rm -rf .backup; fi
        cp -r . .backup || echo "No previous version to backup"
        
        # Pull latest code
        echo "📦 Pulling latest code..."
        git fetch origin
        git reset --hard origin/main
        
        # Install dependencies
        echo "📋 Installing dependencies..."
        npm ci --production=false
        
        # Build application
        echo "🔨 Building application..."
        npm run build
        
        # Restart application with PM2
        echo "🔄 Restarting application..."
        pm2 restart cashflow-finder || pm2 start ecosystem.config.js
        
        # Check application health
        echo "🏥 Checking application health..."
        sleep 10
        
        if curl -f http://localhost:3000/health; then
          echo "✅ Deployment successful!"
          
          # Save PM2 process list
          pm2 save
          
          # Clean up backup
          rm -rf .backup
        else
          echo "❌ Health check failed! Rolling back..."
          
          # Stop new version
          pm2 stop cashflow-finder || true
          
          # Restore backup
          if [ -d ".backup" ]; then
            rm -rf node_modules .next
            cp -r .backup/* .
            npm ci --production=false
            npm run build
            pm2 restart cashflow-finder
            echo "🔄 Rollback completed"
          fi
          
          exit 1
        fi
        EOF
        
        chmod +x deploy-commands.sh
        
        # Copy script to VM and execute
        gcloud compute scp deploy-commands.sh ${{ env.VM_NAME }}:/tmp/ --zone=${{ env.ZONE }}
        
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="bash /tmp/deploy-commands.sh"
    
    - name: Verify deployment
      run: |
        # Get VM external IP
        VM_IP=$(gcloud compute instances describe ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        
        echo "🔍 Verifying deployment on VM IP: $VM_IP"
        
        # Wait for application to be ready
        sleep 15
        
        # Test health endpoint (internal)
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="curl -f http://localhost:3000/health"
        
        echo "✅ Deployment verification completed!"
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application should be available at: https://cashflowfinder.app"
        else
          echo "❌ Deployment failed. Check logs for details."
        fi

  cleanup:
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    name: Cleanup
    
    steps:
    - name: Authenticate to Google Cloud
      if: needs.deploy.result != 'skipped'
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      if: needs.deploy.result != 'skipped'
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Cleanup deployment artifacts
      if: needs.deploy.result != 'skipped'
      run: |
        # Remove temporary deployment files from VM
        gcloud compute ssh ${{ env.VM_NAME }} --zone=${{ env.ZONE }} --command="rm -f /tmp/deploy-commands.sh" || echo "Cleanup completed"